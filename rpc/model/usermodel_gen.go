// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uSERFieldNames          = builder.RawFieldNames(&USER{}, true)
	uSERRows                = strings.Join(uSERFieldNames, ",")
	uSERRowsExpectAutoSet   = strings.Join(stringx.Remove(uSERFieldNames, "id"), ",")
	uSERRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(uSERFieldNames, "id"))
)

type (
	uSERModel interface {
		Insert(ctx context.Context, data *USER) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*USER, error)
		Update(ctx context.Context, data *USER) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUSERModel struct {
		conn  sqlx.SqlConn
		table string
	}

	USER struct {
		Id       int64  `db:"id"`
		Username string `db:"username"`
		Password string `db:"password"`
	}
)

func newUSERModel(conn sqlx.SqlConn) *defaultUSERModel {
	return &defaultUSERModel{
		conn:  conn,
		table: `"public"."user"`,
	}
}

func (m *defaultUSERModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUSERModel) FindOne(ctx context.Context, id int64) (*USER, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", uSERRows, m.table)
	var resp USER
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUSERModel) Insert(ctx context.Context, data *USER) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, uSERRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password)
	return ret, err
}

func (m *defaultUSERModel) Update(ctx context.Context, data *USER) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, uSERRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Username, data.Password)
	return err
}

func (m *defaultUSERModel) tableName() string {
	return m.table
}
